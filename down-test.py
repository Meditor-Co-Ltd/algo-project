#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —Å Google Drive
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
"""

import os
import requests
import joblib
import time

def test_model_download():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ–ª–∏"""
    
    print("üîç –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ú–û–î–ï–õ–ò –° GOOGLE DRIVE")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    file_id = "1CqaltVpa7azklS_orDxzxg6Oj3Pgv_33"
    model_path = "test_model.pkl"
    download_url = f"https://drive.google.com/uc?id={file_id}&export=download"
    
    print(f"üìã FILE_ID: {file_id}")
    print(f"üìã Download URL: {download_url}")
    print(f"üìã Local path: {model_path}")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(model_path):
        os.remove(model_path)
        print(f"üóëÔ∏è Removed existing file: {model_path}")
    
    try:
        print(f"\nüì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
        start_time = time.time()
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL...")
        head_response = requests.head(download_url, timeout=30)
        print(f"   Status: {head_response.status_code}")
        print(f"   Headers:")
        
        important_headers = ['content-type', 'content-length', 'content-disposition']
        for header in important_headers:
            value = head_response.headers.get(header, 'Not found')
            print(f"     {header}: {value}")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        print(f"\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª...")
        response = requests.get(download_url, stream=True, timeout=180)
        response.raise_for_status()
        
        print(f"   Response status: {response.status_code}")
        print(f"   Content-Type: {response.headers.get('content-type', 'Unknown')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTML –æ—Ç–≤–µ—Ç
        content_type = response.headers.get('content-type', '')
        if 'text/html' in content_type:
            print("‚ùå –û–®–ò–ë–ö–ê: Google Drive –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>25MB)")
            print("   - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏—Ä—É—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        total_size = 0
        chunk_count = 0
        
        with open(model_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    total_size += len(chunk)
                    chunk_count += 1
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    if chunk_count % 100 == 0:
                        mb_size = total_size / 1024 / 1024
                        print(f"     üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {mb_size:.1f} MB")
        
        download_time = time.time() - start_time
        mb_size = total_size / 1024 / 1024
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   –†–∞–∑–º–µ—Ä: {total_size:,} bytes ({mb_size:.1f} MB)")
        print(f"   –í—Ä–µ–º—è: {download_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {mb_size/download_time:.1f} MB/s")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if total_size < 1000:
            print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π!")
            print("   –í–µ—Ä–æ—è—Ç–Ω–æ, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ Google Drive")
            
            # –ü–æ–∫–∞–∂–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(model_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read(500)
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
                print(f"   {content[:200]}...")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞...")
        with open(model_path, 'rb') as f:
            first_bytes = f.read(100)
            print(f"   –ü–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã: {first_bytes[:20]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTML
            f.seek(0)
            try:
                text_content = f.read(200).decode('utf-8', errors='ignore')
                if text_content.strip().startswith(('<!DOCTYPE', '<html', '<HTML')):
                    print("‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç HTML!")
                    print(f"   –ù–∞—á–∞–ª–æ: {text_content[:100]}...")
                    return False
                else:
                    print("‚úÖ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ HTML)")
            except:
                print("‚úÖ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
        print(f"\nü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...")
        try:
            model_data = joblib.load(model_path)
            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            print(f"   –ö–ª—é—á–∏ –≤ –º–æ–¥–µ–ª–∏: {list(model_data.keys())}")
            
            if 'model_name' in model_data:
                print(f"   –ò–º—è –º–æ–¥–µ–ª–∏: {model_data['model_name']}")
            
            if 'model' in model_data:
                model = model_data['model']
                print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {type(model).__name__}")
                if hasattr(model, 'n_estimators'):
                    print(f"   n_estimators: {model.n_estimators}")
            
            if 'metrics' in model_data:
                metrics = model_data['metrics']
                print(f"   –ú–µ—Ç—Ä–∏–∫–∏: {metrics}")
            
            if 'feature_names' in model_data:
                features = model_data['feature_names']
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(features)}")
                print(f"   –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–∑–Ω–∞–∫–∞: {features[:3]}")
            
            print(f"\nüéâ –£–°–ü–ï–•! –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
            return True
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏:")
            print(f"   {type(e).__name__}: {e}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            file_size = os.path.getsize(model_path)
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} bytes")
            
            if file_size > 0:
                print("   üí° –§–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è, –Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ–ª—å—é joblib")
                print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–∞ Google Drive")
                print("   2. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞")
                print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π joblib/scikit-learn")
            
            return False
    
    except requests.exceptions.Timeout:
        print("‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        return False
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê —Å–µ—Ç–∏: {e}")
        return False
        
    except Exception as e:
        print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(model_path):
            print(f"\nüóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {model_path}")
            os.remove(model_path)

def test_alternative_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    print(f"\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ú–ï–¢–û–î–û–í")
    print("=" * 50)
    
    file_id = "1CqaltVpa7azklS_orDxzxg6Oj3Pgv_33"
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL
    alternative_urls = [
        f"https://drive.google.com/uc?export=download&id={file_id}",
        f"https://drive.google.com/uc?id={file_id}",
        f"https://docs.google.com/uc?export=download&id={file_id}",
    ]
    
    for i, url in enumerate(alternative_urls, 1):
        print(f"\n{i}. –¢–µ—Å—Ç–∏—Ä—É–µ–º: {url}")
        
        try:
            response = requests.head(url, timeout=10, allow_redirects=True)
            print(f"   Status: {response.status_code}")
            print(f"   Content-Type: {response.headers.get('content-type', 'Unknown')}")
            print(f"   Content-Length: {response.headers.get('content-length', 'Unknown')}")
            
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                if 'application' in content_type or 'octet-stream' in content_type:
                    print(f"   ‚úÖ –≠—Ç–æ—Ç URL –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
                else:
                    print(f"   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π Content-Type")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏...")
    print("   –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å Google Drive –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç API")
    print()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    success = test_model_download()
    
    if not success:
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        test_alternative_methods()
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú:")
        print("1. üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
        print("   https://drive.google.com/uc?id=1CqaltVpa7azklS_orDxzxg6Oj3Pgv_33&export=download")
        print()
        print("2. üîê –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω—ã–π:")
        print("   - –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Google Drive")
        print("   - –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'")
        print("   - –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞'")
        print()
        print("3. üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:")
        print("   - –ï—Å–ª–∏ —Ñ–∞–π–ª >25MB, Google Drive –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å")
        print()
        print("4. üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ:")
        print("   - –í–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Drive")
        print()
        print("5. üõ†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:")
        print("   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ Dropbox –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å")
        print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub LFS")
        print("   - –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —Å–≤–æ–µ–º —Å–µ—Ä–≤–µ—Ä–µ")
    
    else:
        print(f"\nüéâ –í–°–ï –û–¢–õ–ò–ß–ù–û!")
        print("   –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π API.")

if __name__ == "__main__":
    main()